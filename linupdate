#!/usr/bin/env bash
# set -u
export LC_ALL="de_DE.UTF-8"
export TERM="xterm-256color"
export COLUMNS=190

BASE_DIR="/opt/linupdate"

cd "/home"

## ↓ VARIABLES ↓ ##
DATE_DMY=$(date +%d-%m-%Y)                          # Date du jour au format 'JJ-MM-AAAA'
DATE_YMD=$(date +%Y-%m-%d)                          # Date du jour au format 'JJ-MM-AAAA'
DATE_FULL=$(date +%d-%m-%Y_%Hh%M)                   # Date du jour au format 'JJ-MM-AAAA_hh-mm'
TIME=$(date +%Hh%M)                                 # Heure au format 00h00
TIME_FULL=$(date +%Hh%Mm%Ss)                        # Heure au format 00h00m00s
LINUPDATE="${BASE_DIR}/linupdate"                   # Programme principal
FUNCTIONS="${BASE_DIR}/functions"                   # Répertoire des fonctions du programme
LOGS_DIR="/var/log/linupdate"                       # Répertoire des logs
ETC_DIR="/etc/linupdate"                            # Répertoire de configuration du programme
CONF="${ETC_DIR}/linupdate.conf"                    # Fichier de configuration principal de linupdate
MODULES_DIR="${BASE_DIR}/mods-available"            # Répertoire des modules disponibles
MODULES_ENABLED_DIR="${BASE_DIR}/mods-enabled"      # Répertoire des modules activés
AGENTS_ENABLED_DIR="${BASE_DIR}/agents-enabled"     # Répertoire des configurations d'agents activées
MODULES_CONF_DIR="${ETC_DIR}/modules"               # La configuration des modules est stockée dans /etc pour plus de facilité de configuration pour l'utilisateur
SERVICE_DIR="${BASE_DIR}/service"
OS_NAME=""
OS_ID=""
OS_VERSION=""
OS_FAMILY=""
KERNEL=$(uname -r)
ARCH=$(uname -m)
VIRT_TYPE=""
PKG_MANAGER=""
PKG_TYPE=""
PROFILE=""
SERVER_ENV=""
FAILLEVEL=""
MAIL_ENABLED=""
MAIL_RECIPIENT=""
CONF_SOFT_EXCLUDE_MAJOR=""
CONF_SOFT_EXCLUDE=""
CONF_SOFT_NEED_RESTART=""
# CONF_SOFT_KEEP_CRON=""
HISTORIQUE="${BASE_DIR}/linupdate.history"                                 # Emplacement du fichier d'historique des mises à jour
if [ -f "${BASE_DIR}/linupdate" ];then
    MD5SUM="$(/usr/bin/md5sum ${BASE_DIR}/linupdate | awk '{print $1}')"   # md5sum de ce script
fi
REPORT="${DATE_YMD}_${TIME_FULL}_linupdate_${HOSTNAME}.log"                # Nom du fichier de log/rapport
LOG="${LOGS_DIR}/${REPORT}"                                                # Emplacement du fichier de log
LOG_REPORT_MAIL="/tmp/${REPORT}"                                           # Le même fichier mais qui sera légèrement reformaté pour être envoyé par mail puis supprimé
DIST_UPGRADE="0"
KEEP_OLDCONF="0"
UPDATE_ERROR="0"
SOMETHING_TO_UPDATE="yes"
IGNORE_EXCLUDE="0"
UPDATE_EXCLUDE=""
SERVICE_TO_BE_RESTARTED=""
READ_PACKAGES_TO_EXCLUDE=""
READ_PACKAGES_TO_EXCLUDE_MAJOR=""
CRONTAB_PATH=""
ERROR_STATUS="0"
ASSUME_YES="0"
ONLY_UPDATE="0"
PROCID=$(echo "$RANDOM")
VERBOSE="0"

# Variables de modules
MOD_ERROR="0"
LOADED_MODULES=""

# Affichage dans le terminal
# Variables de couleurs :
WHITE=$(tput setaf 7)
GRAY=$(tput setaf 8)
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)
RESET=$(tput sgr0)
# en version bold :
WHITEB=$(tput bold;tput setaf 7)
GRAYB=$(tput bold;tput setaf 8)
GREENB=$(tput bold;tput setaf 2)
REDB=$(tput bold;tput setaf 1)
YELLOWB=$(tput bold;tput setaf 3)
CYANB=$(tput bold;tput setaf 6)
SEP=$(printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '=')    # Séparateur ligne plein écran

# Détermine la version actuelle
if [ -f "${BASE_DIR}/version" ];then
    VERSION=$(cat ${BASE_DIR}/version)
else
    VERSION=""
fi

# Détection de l'utilisateur
if [ "$(id -u)" -ne "0" ];then
    echo -e "\n${YELLOW}Must be executed with sudo ${RESET}\n"
    exit
fi

# Détection du système
# if [ -f "$FUNCTIONS/00_check-system" ];then
#     source "$FUNCTIONS/00_check-system"
#     checkSystem
# else
#     echo -e "[$YELLOW ERROR $RESET] Cannot determine OS"
#     exit
# fi

# Création des répertoires de base
# Note : ne pas créer le répertorie fonctions ici puisque c'est lui qui détermine si le programme est installé ou non. Le répertoire est créé par selfInstall().
mkdir -p "$ETC_DIR"
mkdir -p "$MODULES_CONF_DIR"
mkdir -p "$MODULES_DIR"
mkdir -p "$MODULES_ENABLED_DIR"
mkdir -p "$AGENTS_ENABLED_DIR"
mkdir -p "$SERVICE_DIR"


## ↓ FONCTIONS ↓ ##

help() {
    echo -e "Available parameters:\n"
    echo -e " Main:"
    echo -e "  --vv|-vv                                     → Enable verbose mode"
    echo -e "  --version|-v                                 → Print current version"
    echo -e "  --update|-u                                  → Update linupdate to the last available release on github"
    echo -e "  --enable-auto-update                         → Enable linupdate automatic update"
    echo -e "  --disable-auto-update                        → Disable linupdate automatic update"
    echo -e "  --install|--reinstall|-i                     → Install or reinstall linupdate (/!\ will delete actual configuration)"
    echo -e "  --profile|--type|--print-profile PROFILE     → Configure host profile (leave empty to print actual)"
    echo -e "  --environnement|--env ENV                    → Configure host environment (leave empty to print actual)"
    echo -e ""
    echo -e " Package update configuration"
    echo -e "  --exclude-major|-em PACKAGE                  → Configure packages to exclude on major release update, separated by a comma. Specify 'none' to clean."
    echo -e "  --exclude|-e PACKAGE                         → Configure packages to exclude, separated by a comma. Specify 'none' to clean."
    echo -e ""
    echo -e " Update execution"
    echo -e "  --check-updates|-cu                          → Check packages to be updated and quit"
    echo -e "  --assume-yes|--force                         → Enable 'assume yes' (answer 'yes' to every confirm prompt)"
    echo -e "  --dist-upgrade|-du                           → Enable 'dist-upgrade' for apt (Debian only)"
    echo -e "  --keep-oldconf|-ko                           → Keep actual configuration file when attempting to be overwrited by apt during package update (Debian only)"
    echo -e "  --ignore-exclude|-ie                         → Ignore all packages minor or major release update exclusions"
    echo -e ""
    echo -e " Modules"
    echo -e "  --list-modules|--list-mod|-m                 → List available modules"
    echo -e "  --mod-enable|-mod-enable|-me MODULE          → Enable specified module"
    echo -e "  --mod-disable|-mod-disable|-md MODULE        → Disable specified module"
    echo -e "  --mod-configure|-mc|--mod-exec MODULE        → Configure specified module (using module commands, see module help or documentation)"
    echo -e "  --mod-configure MODULE --help                → Print module help"
    echo -e ""
    echo -e " Agent"
    echo -e "  --agent-deploy|--deploy-agent                → Deploy linupdate agent"
    echo -e "  --agent-start|--start-agent                  → Start linupdate agent"
    echo -e "  --agent-stop|--stop-agent                    → Stop linupdate agent"
    echo -e "  --agent-restart|--restart-agent              → Restart linupdate agent"
    echo -e "  --agent-enable|--enable-agent                → Enable linupdate agent start on boot"
    echo -e ""
}

selfInstall() {
    # Installation de linupdate si il n'est pas présent sur le système

    # Création d'un répertoire temporaire dans lequel on va télécharger la dernière version du script présente sur github
    rm -rf /tmp/linupdate && mkdir -p /tmp/linupdate &&
    cd /tmp/linupdate && git clone --quiet  -b install-this https://github.com/sweting/linupdate.git  > /dev/null &&
    cd /tmp/linupdate/linupdate &&

    # Création du répertoire des fonctions
    mkdir -p "$FUNCTIONS"

    # Copie des fonctions
    \cp -r functions/* "$FUNCTIONS"/

    # Copie des modules .mod
    \cp -r mods-available/* "$MODULES_DIR"/

    # Copie de l'agent
    \cp -r service/* "$SERVICE_DIR"/

    # Copie du nouveau script linupdate lui-même
    \cp linupdate ${BASE_DIR}/linupdate

    # Version
    cp version ${BASE_DIR}/
    rm /usr/bin/linupdate -f
    ln -s ${BASE_DIR}/linupdate /usr/bin/linupdate
    chmod 700 ${BASE_DIR}/linupdate

    cd "$BASE_DIR"

    # Exécution du nouveau script à jour
    exec "${BASE_DIR}/linupdate"
}

# Chargement des fonctions du répertoire functions
if [ -d "$FUNCTIONS" ];then
    # On source tous les fichiers trouvés dans le répertoires des fonctions
    for FUNCTION_FILE in $(ls -A1 "$FUNCTIONS");do
        source $FUNCTIONS/$FUNCTION_FILE
    done
fi

## 1. Si /opt/linupdate n'existe pas alors on procède à la première installation du script
if [ ! -d "$BASE_DIR" ] || [ ! -d "$BASE_DIR/functions" ];then
    selfInstall
    
    # Installation des dépendances
    checkDependencies
fi

checkSystem

## 2. Si aucun fichier de conf n'est présent dans /etc/linupdate/linupdate.conf, alors on procède à son installation
if [ ! -f "$CONF" ];then
    mkdir -p "$ETC_DIR"
    configure
fi


## ↓ TRAITEMENT ↓ ##

# Création du répertoire de logs si n'existe pas
mkdir -p "$LOGS_DIR"

# Vidage des fichiers de logs
echo -n> "$LOG"
chmod 660 "$LOG"

# On écrit tout ce qu'il se passe dans le fichier de log principal
exec &> >(tee -a "$LOG")

# Détection du type de virtualisation si il s'agit d'une VM
VIRT_TYPE=$(/usr/sbin/virt-what)
if [ -z "$VIRT_TYPE" ];then
    VIRT_TYPE="Bare metal"
fi

# Sauvegarde des paramètres passés au script avant qu'il ne disparaissent à cause du shift ci-dessous. Permet de conserver une trace des paramètres passés au cas où.
echo "$@" > /tmp/.linupdate_${PROCID}_main_params.tmp

set +u
while [ $# -ge 1 ];do
    case "$1" in
        --help|-h)
            help
            clean_exit
        ;;
        --version|-v|-V)
            echo "Version: ${YELLOW}$VERSION${RESET}"
            clean_exit
        ;;
        -vv|--vv)
            VERBOSE="1"
        ;;
        --force|--assume-yes)
            ASSUME_YES="1"
        ;;
        --profile|--type|--print-profile)
            # Si rien n'a été précisé en 2nd paramètre alors on affiche simplement le profil actuel
            if [ -z "$2" ];then
                PROFILE=$(grep "^PROFILE=" $CONF | sed 's/PROFILE=//g' | sed 's/"//g')
                echo -e "Current profile: ${YELLOW}$PROFILE${RESET}"
            else
            # Si un nom de profil a été précisé alors on modifie le profil actuel
                if grep -q "PROFILE=" $CONF;then
                    sed -i "s/PROFILE=.*/PROFILE=\"$2\"/g" $CONF &&
                    echo -e "Profil has been changed: ${YELLOW}$2${RESET}"
                fi
            fi
            clean_exit
        ;;
        --environnement|--env)
            # Si rien n'a été précisé en 2nd paramètre alors on affiche simplement l'env actuel
            if [ -z "$2" ];then
                ENV=$(grep "^ENV=" $CONF | sed 's/ENV=//g' | sed 's/"//g')
                echo -e "Current environment: ${YELLOW}$ENV${RESET}"
            else
            # Si un nom d'env a été précisé alors on modifie l'env actuel
                if grep -q "ENV=" $CONF;then
                    sed -i "s/ENV=.*/ENV=\"$2\"/g" $CONF &&
                    echo -e "Environment has been changed: ${YELLOW}$2${RESET}"
                fi
            fi
            clean_exit
        ;;
        --update|-u)
            ONLY_UPDATE="1"
            getConf
            selfUpdate
            clean_exit
        ;;
        --install|--reinstall|-i)
            if [ -d "/opt/linupdate" ];then
                echo -n " This action will delete the entire actual linupdate installation and its modules. Confirm (yes/no): "; read -p "" CONFIRM
                if [ "$CONFIRM" != "yes" ];then clean_exit;fi
                rm ${BASE_DIR} -rf
            fi
            selfInstall
            clean_exit
        ;;
        --list-modules|--list-mod|-m)
            listModules
            clean_exit
        ;;
        --ignore-exclude|-ie)
            IGNORE_EXCLUDE=1
        ;;
        --check-updates|-cu)
            getConf
            checkPackagesBeforeUpdate
            clean_exit
        ;;
        --dist-upgrade|-du)
            DIST_UPGRADE=1
        ;;
        --keep-oldconf|-ko)
            KEEP_OLDCONF=1
        ;;
        --exclude|-e)
            if [ ! -z "$2" ];then
                READ_PACKAGES_TO_EXCLUDE="$2"
            fi
            exclude
            clean_exit
        ;;
        --exclude-major|-em)
            if [ ! -z "$2" ];then
                READ_PACKAGES_TO_EXCLUDE="$2"
            fi
            READ_PACKAGES_TO_EXCLUDE_MAJOR="1"
            exclude
            clean_exit
        ;;
        --mod-enable|-mod-enable|-me)
            MODULE=$2
            shift
            if [ ! -f "${MODULES_DIR}/${MODULE}.mod" ];then
                echo "Error: unknown module ${YELLOW}${MODULE}${RESET}"
                clean_exit
            fi

            # Enable module
            source "${MODULES_DIR}/${MODULE}.mod"
            mod_enable &&
            echo -e "Module ${YELLOW}${MODULE}${RESET} enabled"
            clean_exit
        ;;
        --mod-disable|-mod-disable|-md)
            MODULE=$2
            shift
            if [ ! -f "${MODULES_DIR}/${MODULE}.mod" ];then
                echo "Error: unknown module ${YELLOW}${MODULE}${RESET}"
                clean_exit
            fi

            # Disable module
            source "${MODULES_DIR}/${MODULE}.mod"
            mod_disable &&
            echo -e "Module ${YELLOW}${MODULE}${RESET} disabled"
            clean_exit
        ;;
        --mod-configure|-mc|--mod-exec)
            getConf
            MODULE=$2
            shift
            if [ ! -f "${MODULES_DIR}/${MODULE}.mod" ];then
                echo "Error: unknown module ${YELLOW}${MODULE}${RESET}"
                clean_exit
            fi

            # Configure module
            source "${MODULES_DIR}/${MODULE}.mod"
            mod_configure $@ &&
            echo -e "Module ${YELLOW}${MODULE}${RESET} configured"
            clean_exit
        ;;
        --agent-deploy|--deploy-agent)
            deployAgent
            clean_exit
        ;;
        --agent-start|--start-agent)
            startAgent
            clean_exit
        ;;
        --agent-stop|--stop-agent)
            stopAgent
            clean_exit
        ;;
        --agent-restart|--restart-agent)
            restartAgent
            clean_exit
        ;;
        --agent-enable|--enable-agent)
            enableAgent
            clean_exit
        ;;
        --agent-disable|--disable-agent)
            disableAgent
            clean_exit
        ;;
        --enable-auto-update)
            enableSelfUpdate
            clean_exit
        ;;
        --disable-auto-update)
            disableSelfUpdate
            clean_exit
        ;;
        *)
            echo "Unknown parameter: $1"
            help
            clean_exit
        ;;
    esac
    shift
done
# set -u

echo -e "\n\n
 .__  .__                        .___       __          
 |  | |__| ____  __ ________   __| _/____ _/  |_  ____  
 |  | |  |/    \|  |  \____ \ / __ |\__  \\   __\/ __ \ 
 |  |_|  |   |  \  |  /  |_> > /_/ | / __ \|  | \  ___/ 
 |____/__|___|  /____/|   __/\____ |(____  /__|  \___  >
              \/      |__|        \/     \/          \/ 


 ${YELLOW}linupdate${RESET} - advanced package updater for linux distributions\n\n"

# Vérification des dépendances
checkDependencies

# Lecture du fichier de conf
getConf      # pour déterminer le type de serveur sur lequel nous sommes
selfUpdate   # Mise à jour du fichier de conf et vérification si une nouvelle version du script est disponible sur github
getConf      # On re-recup la conf du fichier de conf .conf si celle-ci a été changée par selfUpdate()

# Chargement des modules
loadModules

# Exécution des modules pre mise à jour
execPreModules

echo -e " Hostname:         ${YELLOW}${HOSTNAME}${RESET}"
echo -e " OS:               ${YELLOW}${OS_NAME} $OS_VERSION ${RESET}"
echo -e " Kernel:           ${YELLOW}$KERNEL ${ARCH}${RESET}"
if [ ! -z "$VIRT_TYPE" ];then
    echo -e " Virtualization:   ${YELLOW}${VIRT_TYPE}${RESET}"
fi
echo -e " Profile:          ${YELLOW}${PROFILE}${RESET}"
echo -e " Environment:      ${YELLOW}${SERVER_ENV}${RESET}"
echo -e " Executed on:      ${YELLOW}${DATE_DMY} at ${TIME}${RESET}"
echo -ne " Executed by:     ${YELLOW} "; whoami; echo -ne "${RESET}"
if [ -t 0 ];then
    echo -e " Execution:        ${YELLOW}manual${RESET}"
else
    echo -e " Execution:        ${YELLOW}automatic (no tty)${RESET}"
fi

# Vérification des paquets à exclure avant de lancer la mise à jour
checkPackagesBeforeUpdate

# Exécution des mises à jour
update

# Réactivation des paquets ignorés par apt-mark
if [ "$OS_FAMILY" == "Debian" ];then
    HOLDED_PACKAGES=$(apt-mark showhold)
    if [ ! -z "$HOLDED_PACKAGES" ];then
        OLD_IFS="$IFS"
        IFS=$'\n'
        for HOLDED_PACKAGE in $(echo "$HOLDED_PACKAGES");do
            apt-mark unhold "$HOLDED_PACKAGE"
        done
        IFS="$OLD_IFS"
    fi
fi

# Exécution de modules complémentaires post-mise à jour
execPostModules

# Redémarrage des services post-mise à jour
restartService

echo -e "\nOperation completed\n" 

# Envoi du rapport final par mail
sendMail

clean_exit
