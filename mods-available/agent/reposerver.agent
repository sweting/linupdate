#!/usr/bin/env bash

REPOSERVER_CONF="/etc/linupdate/modules/reposerver.conf"
INOTIFY_RUNNING="no"
# ngrep parameters
NGREP_ENABLED="yes"
NGREP_CMD="ngrep -q -t -W byline"
NGREP_GNR_RUNNING="no"
NGREP_PKG_UPDATE_RUNNING="no"
NGREP_PKG_STATUS_RUNNING="no"
NGREP_FULL_HISTORY_RUNNING="no"
MAX_HISTORY="0"
COUNTER="0"


## Functions ##

function general_checks {
    # Checking that reposerver module is enabled
    if [ ! -f "/opt/linupdate/mods-enabled/reposerver.mod" ];then
        echo -e "[ ERROR ] reposerver module is disabled."
        exit 1
    fi

    # Checking that a configuration file exists for reposerver module
    if [ ! -f "$REPOSERVER_CONF" ];then
        echo -e "[ ERROR ] No configuration file '$REPOSERVER_CONF' has been found"
        exit 1
    fi

    # Checking that a log file exists for yum or apt
    if [ -f "/var/log/yum.log" ];then
        LOGFILE="/var/log/yum.log"

    elif [ -f "/var/log/dnf.log" ];then # Some newer rehel derivates has renamed it to dnf.log
        LOGFILE="/var/log/dnf.log"

    elif [ -f "/var/log/apt/history.log" ];then
        LOGFILE="/var/log/apt/history.log"

    else
        echo -e "[ ERROR ] No log file for yum or apt has been found."
        exit 1
    fi

    # Retrieving repomanager server IP address
    # If this informations is missing then wait for some seconds and retry
    REPOSERVER_IP=$(grep "^IP=" "$REPOSERVER_CONF" | sed 's/IP=//g' | sed 's/"//g')
    if [ -z "$REPOSERVER_IP" ];then
        sleep 3

        REPOSERVER_IP=$(grep "^IP=" "$REPOSERVER_CONF" | sed 's/IP=//g' | sed 's/"//g')
        if [ -z "$REPOSERVER_IP" ];then
            echo -e "[ ERROR ] Cannot retrieve Repomanager server IP address"
            exit 1
        fi
    fi
}

# Sending general informations
function send_general_status {
    /opt/linupdate/linupdate --mod-exec reposerver --from-agent --send-general-status > /dev/null
    if [ $? != "0" ];then
        echo -e "An error occured while sending data\n"
    else
        echo -e "Data have been send\n"
    fi
}

# Sending full events history
function send_full_history {
    if [ "$MAX_HISTORY" -gt "0" ];then
        /opt/linupdate/linupdate --mod-exec reposerver --from-agent --send-full-history $MAX_HISTORY > /dev/null
    else
        /opt/linupdate/linupdate --mod-exec reposerver --from-agent --send-full-history > /dev/null
    fi
    if [ $? != "0" ];then
        echo -e "An error occured while sending data\n"
    else
        echo -e "History has been send\n"
    fi
}

# Sending packages status
function send_packages_status {
    /opt/linupdate/linupdate --mod-exec reposerver --from-agent --send-packages-status > /dev/null
    if [ $? != "0" ];then
        echo -e "An error occured while sending data\n"
    else
        echo -e "Data have been send\n"
    fi
}

# Sending full status
function send_full_status {
    /opt/linupdate/linupdate --mod-exec reposerver --from-agent --send-full-status > /dev/null
    if [ $? != "0" ];then
        echo -e "An error occured while sending data\n"
    else
        echo -e "Data have been send\n"
    fi
}

# Sending last events history
function inotify_package_event {
    if [ "$INOTIFY_RUNNING" == "no" ];then
        # If apt/yum log file is being modified then send history to the Repomanager server
        while true; do
            /usr/bin/inotifywait -q -e modify "$LOGFILE"
            echo "New event has been detected in '$LOGFILE' - sending history to the Repomanager server."

            # Executing
            MAX_HISTORY="2"
            send_full_history

            sleep 2
        done &

        INOTIFY_RUNNING="yes"
    fi
}

# Wait for a general informations sending request
function ngrep_general_update_request {
    if [ "$NGREP_GNR_RUNNING" == "no" ];then
        while true; do
            $NGREP_CMD 'r-general-status' "src host $REPOSERVER_IP" -n 1 > /dev/null

            echo "General informations are requested by the Repomanager server - sending data."

            # Executing
            send_general_status

            sleep 2
        done &

        NGREP_GNR_RUNNING="yes"
    fi
}

# Wait for a packages informations sending request
function ngrep_packages_status_request {
    if [ "$NGREP_PKG_STATUS_RUNNING" == "no" ];then
        while true; do
            $NGREP_CMD 'r-pkgs-status' "src host $REPOSERVER_IP" -n 1 > /dev/null

            echo "Packages informations are requested by the Repomanager server - sending data."

            # Executing
            send_packages_status

            sleep 2
        done &

        NGREP_PKG_STATUS_RUNNING="yes"
    fi
}

# Wait for a package update request
function ngrep_packages_update_requested {
    if [ "$NGREP_PKG_UPDATE_RUNNING" == "no" ];then
        while true; do
            $NGREP_CMD 'r-update-pkgs' "src host $REPOSERVER_IP" -n 1 > /dev/null

            echo "A package update is requested by the Repomanager server - executing update with linupdate."

            # Executing packages update
            /opt/linupdate/linupdate --assume-yes
            if [ $? != "0" ];then
                echo -e "An error occured while executing package update\n"
            else
                echo -e "Package update is completed\n"
            fi

            sleep 2
        done &

        NGREP_PKG_UPDATE_RUNNING="yes"
    fi
}


## Execution ##

# Checking that all the necessary elements are present for the agent execution
general_checks

# Checking if ngrep scans have been disabled
WATCH_FOR_REQUEST=$(grep "^WATCH_FOR_REQUEST=" "$REPOSERVER_CONF" | sed 's/WATCH_FOR_REQUEST=//g' | sed 's/"//g')
if [ "$WATCH_FOR_REQUEST" == "disabled" ];then
    NGREP_ENABLED="no"
fi

# If scans are enabled
if [ "$NGREP_ENABLED" == "yes" ];then
    # Retrieving network interface to scan if specified
    NGREP_INT=$(grep "^WATCH_INTERFACE=" $REPOSERVER_CONF | sed 's/WATCH_INTERFACE=//g' | sed 's/"//g')

    #Â If network interface is specified with "auto" or is empty, then try to automatically retrieve default interface
    if [ -z "$NGREP_INT" ] || [ "$NGREP_INT" == "auto" ];then
        DEFAULT_INT=$(route | grep '^default' | grep -o '[^ ]*$')
        DEFAULT_INT_COUNT=$(echo "$DEFAULT_INT" | wc -l)

        if [ -z "$DEFAULT_INT" ];then
            echo -e "[ ERROR ] Cannot determine default network interface."
            exit 1
        fi

        if [ "$DEFAULT_INT_COUNT" != "1" ];then
            echo -e "[ ERROR ] Cannot determine default network interface: multiple default interfaces have been detected."
            exit 1
        fi

        # Taking into account the detected network interface
        NGREP_CMD="$NGREP_CMD -d $DEFAULT_INT"

    else
        # Else taking into account the specified network interface name
        NGREP_CMD="$NGREP_CMD -d $NGREP_INT"
    fi
fi

# Executing regular tasks
while true; do
    # Checking that all the necessary elements are present for the agent execution.
    # This is checked every time in case that a configuration change has been made in the configuration file
    general_checks

    # Regulary sending data to the Repomanager server (every hour)
    # 3600 / 5sec (sleep 5) = 720
    if [ "$COUNTER" -eq "0" ] || [ "$COUNTER" -eq "720" ];then
        # Sending full status
        echo -e "Periodically sending informations about this host to the repomanager server"
        send_full_status

        # Reset counter
        COUNTER="0"
    fi

    # If no inotify process is running, then execute it in background
    inotify_package_event

    # If ngrep scans are enabled, then execute them in background
    if [ "$NGREP_ENABLED" == "yes" ];then
        # Monitor general informations sending requests
        ngrep_general_update_request

        # Monitor packages informations sending requests
        ngrep_packages_status_request

        # Monitor package update requests
        ngrep_packages_update_requested
    fi

    sleep 5

    (( COUNTER++ ))
done

exit